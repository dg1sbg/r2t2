// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: r2t2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "r2t2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace R2T2Proto {

namespace {

const ::google::protobuf::Descriptor* R2T2Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2T2Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* R2T2Message_Gain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R2T2Message_Gain_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* R2T2Message_Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_r2t2_2eproto() {
  protobuf_AddDesc_r2t2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "r2t2.proto");
  GOOGLE_CHECK(file != NULL);
  R2T2Message_descriptor_ = file->message_type(0);
  static const int R2T2Message_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, rxdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, txdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, fftdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, txdataack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, rxfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, txfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, txrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, rxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, fftrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, fftsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, forwardpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, backwardpower_),
  };
  R2T2Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      R2T2Message_descriptor_,
      R2T2Message::default_instance_,
      R2T2Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(R2T2Message));
  R2T2Message_Gain_descriptor_ = R2T2Message_descriptor_->nested_type(0);
  static const int R2T2Message_Gain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message_Gain, adc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message_Gain, gain_),
  };
  R2T2Message_Gain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      R2T2Message_Gain_descriptor_,
      R2T2Message_Gain::default_instance_,
      R2T2Message_Gain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message_Gain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2Message_Gain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(R2T2Message_Gain));
  R2T2Message_Command_descriptor_ = R2T2Message_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_r2t2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    R2T2Message_descriptor_, &R2T2Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    R2T2Message_Gain_descriptor_, &R2T2Message_Gain::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_r2t2_2eproto() {
  delete R2T2Message::default_instance_;
  delete R2T2Message_reflection_;
  delete R2T2Message_Gain::default_instance_;
  delete R2T2Message_Gain_reflection_;
}

void protobuf_AddDesc_r2t2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nr2t2.proto\022\tR2T2Proto\"\336\004\n\013R2T2Message\022"
    "/\n\007command\030\001 \001(\0162\036.R2T2Proto.R2T2Message"
    ".Command\022\016\n\006rxData\030\002 \001(\014\022\016\n\006txData\030\003 \001(\014"
    "\022\017\n\007fftData\030\004 \001(\014\022\021\n\ttxDataAck\030\n \001(\r\022\016\n\006"
    "rxFreq\030\024 \001(\004\022\016\n\006txFreq\030\025 \001(\004\022\016\n\006txRate\030\026"
    " \001(\r\022\016\n\006rxRate\030\027 \001(\r\022\017\n\007fftRate\030\030 \001(\r\022\017\n"
    "\007fftSize\030\031 \001(\r\022\n\n\002rx\030\036 \001(\r\022\n\n\002tx\030\037 \001(\r\022)"
    "\n\004gain\030( \001(\0132\033.R2T2Proto.R2T2Message.Gai"
    "n\022(\n\003att\030) \001(\0132\033.R2T2Proto.R2T2Message.G"
    "ain\022\017\n\007antenna\030* \001(\r\022\024\n\014forwardPower\0302 \001"
    "(\001\022\025\n\rbackwardPower\0303 \001(\001\032!\n\004Gain\022\013\n\003adc"
    "\030\001 \002(\r\022\014\n\004gain\030\002 \002(\021\"\251\001\n\007Command\022\n\n\006RXOP"
    "EN\020\001\022\n\n\006TXOPEN\020\002\022\t\n\005CLOSE\020\004\022\016\n\nSTARTAUDI"
    "O\020\005\022\r\n\tSTOPAUDIO\020\006\022\014\n\010STARTFFT\020\007\022\013\n\007STOP"
    "FFT\020\010\022\n\n\006REQFFT\020\t\022\n\n\006REINIT\020\n\022\007\n\003ACK\020\013\022\010"
    "\n\004NACK\020\014\022\013\n\007TIMEOUT\020\r\022\t\n\005ALIVE\020\016", 632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "r2t2.proto", &protobuf_RegisterTypes);
  R2T2Message::default_instance_ = new R2T2Message();
  R2T2Message_Gain::default_instance_ = new R2T2Message_Gain();
  R2T2Message::default_instance_->InitAsDefaultInstance();
  R2T2Message_Gain::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_r2t2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_r2t2_2eproto {
  StaticDescriptorInitializer_r2t2_2eproto() {
    protobuf_AddDesc_r2t2_2eproto();
  }
} static_descriptor_initializer_r2t2_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* R2T2Message_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2T2Message_Command_descriptor_;
}
bool R2T2Message_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const R2T2Message_Command R2T2Message::RXOPEN;
const R2T2Message_Command R2T2Message::TXOPEN;
const R2T2Message_Command R2T2Message::CLOSE;
const R2T2Message_Command R2T2Message::STARTAUDIO;
const R2T2Message_Command R2T2Message::STOPAUDIO;
const R2T2Message_Command R2T2Message::STARTFFT;
const R2T2Message_Command R2T2Message::STOPFFT;
const R2T2Message_Command R2T2Message::REQFFT;
const R2T2Message_Command R2T2Message::REINIT;
const R2T2Message_Command R2T2Message::ACK;
const R2T2Message_Command R2T2Message::NACK;
const R2T2Message_Command R2T2Message::TIMEOUT;
const R2T2Message_Command R2T2Message::ALIVE;
const R2T2Message_Command R2T2Message::Command_MIN;
const R2T2Message_Command R2T2Message::Command_MAX;
const int R2T2Message::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int R2T2Message_Gain::kAdcFieldNumber;
const int R2T2Message_Gain::kGainFieldNumber;
#endif  // !_MSC_VER

R2T2Message_Gain::R2T2Message_Gain()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2T2Proto.R2T2Message.Gain)
}

void R2T2Message_Gain::InitAsDefaultInstance() {
}

R2T2Message_Gain::R2T2Message_Gain(const R2T2Message_Gain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2T2Proto.R2T2Message.Gain)
}

void R2T2Message_Gain::SharedCtor() {
  _cached_size_ = 0;
  adc_ = 0u;
  gain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2T2Message_Gain::~R2T2Message_Gain() {
  // @@protoc_insertion_point(destructor:R2T2Proto.R2T2Message.Gain)
  SharedDtor();
}

void R2T2Message_Gain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R2T2Message_Gain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2T2Message_Gain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2T2Message_Gain_descriptor_;
}

const R2T2Message_Gain& R2T2Message_Gain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_r2t2_2eproto();
  return *default_instance_;
}

R2T2Message_Gain* R2T2Message_Gain::default_instance_ = NULL;

R2T2Message_Gain* R2T2Message_Gain::New() const {
  return new R2T2Message_Gain;
}

void R2T2Message_Gain::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<R2T2Message_Gain*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(adc_, gain_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool R2T2Message_Gain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2T2Proto.R2T2Message.Gain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc_)));
          set_has_adc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gain;
        break;
      }

      // required sint32 gain = 2;
      case 2: {
        if (tag == 16) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2T2Proto.R2T2Message.Gain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2T2Proto.R2T2Message.Gain)
  return false;
#undef DO_
}

void R2T2Message_Gain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2T2Proto.R2T2Message.Gain)
  // required uint32 adc = 1;
  if (has_adc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adc(), output);
  }

  // required sint32 gain = 2;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2T2Proto.R2T2Message.Gain)
}

::google::protobuf::uint8* R2T2Message_Gain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2T2Proto.R2T2Message.Gain)
  // required uint32 adc = 1;
  if (has_adc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adc(), target);
  }

  // required sint32 gain = 2;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2T2Proto.R2T2Message.Gain)
  return target;
}

int R2T2Message_Gain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adc = 1;
    if (has_adc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc());
    }

    // required sint32 gain = 2;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->gain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2T2Message_Gain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const R2T2Message_Gain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const R2T2Message_Gain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void R2T2Message_Gain::MergeFrom(const R2T2Message_Gain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adc()) {
      set_adc(from.adc());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void R2T2Message_Gain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2T2Message_Gain::CopyFrom(const R2T2Message_Gain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2T2Message_Gain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void R2T2Message_Gain::Swap(R2T2Message_Gain* other) {
  if (other != this) {
    std::swap(adc_, other->adc_);
    std::swap(gain_, other->gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata R2T2Message_Gain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2T2Message_Gain_descriptor_;
  metadata.reflection = R2T2Message_Gain_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int R2T2Message::kCommandFieldNumber;
const int R2T2Message::kRxDataFieldNumber;
const int R2T2Message::kTxDataFieldNumber;
const int R2T2Message::kFftDataFieldNumber;
const int R2T2Message::kTxDataAckFieldNumber;
const int R2T2Message::kRxFreqFieldNumber;
const int R2T2Message::kTxFreqFieldNumber;
const int R2T2Message::kTxRateFieldNumber;
const int R2T2Message::kRxRateFieldNumber;
const int R2T2Message::kFftRateFieldNumber;
const int R2T2Message::kFftSizeFieldNumber;
const int R2T2Message::kRxFieldNumber;
const int R2T2Message::kTxFieldNumber;
const int R2T2Message::kGainFieldNumber;
const int R2T2Message::kAttFieldNumber;
const int R2T2Message::kAntennaFieldNumber;
const int R2T2Message::kForwardPowerFieldNumber;
const int R2T2Message::kBackwardPowerFieldNumber;
#endif  // !_MSC_VER

R2T2Message::R2T2Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2T2Proto.R2T2Message)
}

void R2T2Message::InitAsDefaultInstance() {
  gain_ = const_cast< ::R2T2Proto::R2T2Message_Gain*>(&::R2T2Proto::R2T2Message_Gain::default_instance());
  att_ = const_cast< ::R2T2Proto::R2T2Message_Gain*>(&::R2T2Proto::R2T2Message_Gain::default_instance());
}

R2T2Message::R2T2Message(const R2T2Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R2T2Proto.R2T2Message)
}

void R2T2Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = 1;
  rxdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fftdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txdataack_ = 0u;
  rxfreq_ = GOOGLE_ULONGLONG(0);
  txfreq_ = GOOGLE_ULONGLONG(0);
  txrate_ = 0u;
  rxrate_ = 0u;
  fftrate_ = 0u;
  fftsize_ = 0u;
  rx_ = 0u;
  tx_ = 0u;
  gain_ = NULL;
  att_ = NULL;
  antenna_ = 0u;
  forwardpower_ = 0;
  backwardpower_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R2T2Message::~R2T2Message() {
  // @@protoc_insertion_point(destructor:R2T2Proto.R2T2Message)
  SharedDtor();
}

void R2T2Message::SharedDtor() {
  if (rxdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rxdata_;
  }
  if (txdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete txdata_;
  }
  if (fftdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fftdata_;
  }
  if (this != default_instance_) {
    delete gain_;
    delete att_;
  }
}

void R2T2Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2T2Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R2T2Message_descriptor_;
}

const R2T2Message& R2T2Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_r2t2_2eproto();
  return *default_instance_;
}

R2T2Message* R2T2Message::default_instance_ = NULL;

R2T2Message* R2T2Message::New() const {
  return new R2T2Message;
}

void R2T2Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<R2T2Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rxfreq_, txrate_);
    command_ = 1;
    if (has_rxdata()) {
      if (rxdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rxdata_->clear();
      }
    }
    if (has_txdata()) {
      if (txdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        txdata_->clear();
      }
    }
    if (has_fftdata()) {
      if (fftdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fftdata_->clear();
      }
    }
    txdataack_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(rxrate_, tx_);
    if (has_gain()) {
      if (gain_ != NULL) gain_->::R2T2Proto::R2T2Message_Gain::Clear();
    }
    if (has_att()) {
      if (att_ != NULL) att_->::R2T2Proto::R2T2Message_Gain::Clear();
    }
    antenna_ = 0u;
  }
  ZR_(forwardpower_, backwardpower_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool R2T2Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2T2Proto.R2T2Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .R2T2Proto.R2T2Message.Command command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::R2T2Proto::R2T2Message_Command_IsValid(value)) {
            set_command(static_cast< ::R2T2Proto::R2T2Message_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rxData;
        break;
      }

      // optional bytes rxData = 2;
      case 2: {
        if (tag == 18) {
         parse_rxData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rxdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_txData;
        break;
      }

      // optional bytes txData = 3;
      case 3: {
        if (tag == 26) {
         parse_txData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fftData;
        break;
      }

      // optional bytes fftData = 4;
      case 4: {
        if (tag == 34) {
         parse_fftData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fftdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_txDataAck;
        break;
      }

      // optional uint32 txDataAck = 10;
      case 10: {
        if (tag == 80) {
         parse_txDataAck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txdataack_)));
          set_has_txdataack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_rxFreq;
        break;
      }

      // optional uint64 rxFreq = 20;
      case 20: {
        if (tag == 160) {
         parse_rxFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxfreq_)));
          set_has_rxfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_txFreq;
        break;
      }

      // optional uint64 txFreq = 21;
      case 21: {
        if (tag == 168) {
         parse_txFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txfreq_)));
          set_has_txfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_txRate;
        break;
      }

      // optional uint32 txRate = 22;
      case 22: {
        if (tag == 176) {
         parse_txRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txrate_)));
          set_has_txrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_rxRate;
        break;
      }

      // optional uint32 rxRate = 23;
      case 23: {
        if (tag == 184) {
         parse_rxRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxrate_)));
          set_has_rxrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_fftRate;
        break;
      }

      // optional uint32 fftRate = 24;
      case 24: {
        if (tag == 192) {
         parse_fftRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fftrate_)));
          set_has_fftrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_fftSize;
        break;
      }

      // optional uint32 fftSize = 25;
      case 25: {
        if (tag == 200) {
         parse_fftSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fftsize_)));
          set_has_fftsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_rx;
        break;
      }

      // optional uint32 rx = 30;
      case 30: {
        if (tag == 240) {
         parse_rx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_)));
          set_has_rx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_tx;
        break;
      }

      // optional uint32 tx = 31;
      case 31: {
        if (tag == 248) {
         parse_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_)));
          set_has_tx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_gain;
        break;
      }

      // optional .R2T2Proto.R2T2Message.Gain gain = 40;
      case 40: {
        if (tag == 322) {
         parse_gain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_att;
        break;
      }

      // optional .R2T2Proto.R2T2Message.Gain att = 41;
      case 41: {
        if (tag == 330) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_antenna;
        break;
      }

      // optional uint32 antenna = 42;
      case 42: {
        if (tag == 336) {
         parse_antenna:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antenna_)));
          set_has_antenna();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_forwardPower;
        break;
      }

      // optional double forwardPower = 50;
      case 50: {
        if (tag == 401) {
         parse_forwardPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardpower_)));
          set_has_forwardpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(409)) goto parse_backwardPower;
        break;
      }

      // optional double backwardPower = 51;
      case 51: {
        if (tag == 409) {
         parse_backwardPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backwardpower_)));
          set_has_backwardpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2T2Proto.R2T2Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2T2Proto.R2T2Message)
  return false;
#undef DO_
}

void R2T2Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2T2Proto.R2T2Message)
  // optional .R2T2Proto.R2T2Message.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional bytes rxData = 2;
  if (has_rxdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->rxdata(), output);
  }

  // optional bytes txData = 3;
  if (has_txdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->txdata(), output);
  }

  // optional bytes fftData = 4;
  if (has_fftdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->fftdata(), output);
  }

  // optional uint32 txDataAck = 10;
  if (has_txdataack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->txdataack(), output);
  }

  // optional uint64 rxFreq = 20;
  if (has_rxfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->rxfreq(), output);
  }

  // optional uint64 txFreq = 21;
  if (has_txfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->txfreq(), output);
  }

  // optional uint32 txRate = 22;
  if (has_txrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->txrate(), output);
  }

  // optional uint32 rxRate = 23;
  if (has_rxrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->rxrate(), output);
  }

  // optional uint32 fftRate = 24;
  if (has_fftrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->fftrate(), output);
  }

  // optional uint32 fftSize = 25;
  if (has_fftsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->fftsize(), output);
  }

  // optional uint32 rx = 30;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->rx(), output);
  }

  // optional uint32 tx = 31;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->tx(), output);
  }

  // optional .R2T2Proto.R2T2Message.Gain gain = 40;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->gain(), output);
  }

  // optional .R2T2Proto.R2T2Message.Gain att = 41;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->att(), output);
  }

  // optional uint32 antenna = 42;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->antenna(), output);
  }

  // optional double forwardPower = 50;
  if (has_forwardpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->forwardpower(), output);
  }

  // optional double backwardPower = 51;
  if (has_backwardpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->backwardpower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2T2Proto.R2T2Message)
}

::google::protobuf::uint8* R2T2Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2T2Proto.R2T2Message)
  // optional .R2T2Proto.R2T2Message.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional bytes rxData = 2;
  if (has_rxdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rxdata(), target);
  }

  // optional bytes txData = 3;
  if (has_txdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->txdata(), target);
  }

  // optional bytes fftData = 4;
  if (has_fftdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->fftdata(), target);
  }

  // optional uint32 txDataAck = 10;
  if (has_txdataack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->txdataack(), target);
  }

  // optional uint64 rxFreq = 20;
  if (has_rxfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->rxfreq(), target);
  }

  // optional uint64 txFreq = 21;
  if (has_txfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->txfreq(), target);
  }

  // optional uint32 txRate = 22;
  if (has_txrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->txrate(), target);
  }

  // optional uint32 rxRate = 23;
  if (has_rxrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->rxrate(), target);
  }

  // optional uint32 fftRate = 24;
  if (has_fftrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->fftrate(), target);
  }

  // optional uint32 fftSize = 25;
  if (has_fftsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->fftsize(), target);
  }

  // optional uint32 rx = 30;
  if (has_rx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->rx(), target);
  }

  // optional uint32 tx = 31;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->tx(), target);
  }

  // optional .R2T2Proto.R2T2Message.Gain gain = 40;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->gain(), target);
  }

  // optional .R2T2Proto.R2T2Message.Gain att = 41;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->att(), target);
  }

  // optional uint32 antenna = 42;
  if (has_antenna()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->antenna(), target);
  }

  // optional double forwardPower = 50;
  if (has_forwardpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->forwardpower(), target);
  }

  // optional double backwardPower = 51;
  if (has_backwardpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->backwardpower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2T2Proto.R2T2Message)
  return target;
}

int R2T2Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .R2T2Proto.R2T2Message.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional bytes rxData = 2;
    if (has_rxdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rxdata());
    }

    // optional bytes txData = 3;
    if (has_txdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txdata());
    }

    // optional bytes fftData = 4;
    if (has_fftdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fftdata());
    }

    // optional uint32 txDataAck = 10;
    if (has_txdataack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txdataack());
    }

    // optional uint64 rxFreq = 20;
    if (has_rxfreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxfreq());
    }

    // optional uint64 txFreq = 21;
    if (has_txfreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txfreq());
    }

    // optional uint32 txRate = 22;
    if (has_txrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txrate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 rxRate = 23;
    if (has_rxrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxrate());
    }

    // optional uint32 fftRate = 24;
    if (has_fftrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fftrate());
    }

    // optional uint32 fftSize = 25;
    if (has_fftsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fftsize());
    }

    // optional uint32 rx = 30;
    if (has_rx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx());
    }

    // optional uint32 tx = 31;
    if (has_tx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx());
    }

    // optional .R2T2Proto.R2T2Message.Gain gain = 40;
    if (has_gain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gain());
    }

    // optional .R2T2Proto.R2T2Message.Gain att = 41;
    if (has_att()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }

    // optional uint32 antenna = 42;
    if (has_antenna()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antenna());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double forwardPower = 50;
    if (has_forwardpower()) {
      total_size += 2 + 8;
    }

    // optional double backwardPower = 51;
    if (has_backwardpower()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2T2Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const R2T2Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const R2T2Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void R2T2Message::MergeFrom(const R2T2Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_rxdata()) {
      set_rxdata(from.rxdata());
    }
    if (from.has_txdata()) {
      set_txdata(from.txdata());
    }
    if (from.has_fftdata()) {
      set_fftdata(from.fftdata());
    }
    if (from.has_txdataack()) {
      set_txdataack(from.txdataack());
    }
    if (from.has_rxfreq()) {
      set_rxfreq(from.rxfreq());
    }
    if (from.has_txfreq()) {
      set_txfreq(from.txfreq());
    }
    if (from.has_txrate()) {
      set_txrate(from.txrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rxrate()) {
      set_rxrate(from.rxrate());
    }
    if (from.has_fftrate()) {
      set_fftrate(from.fftrate());
    }
    if (from.has_fftsize()) {
      set_fftsize(from.fftsize());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_gain()) {
      mutable_gain()->::R2T2Proto::R2T2Message_Gain::MergeFrom(from.gain());
    }
    if (from.has_att()) {
      mutable_att()->::R2T2Proto::R2T2Message_Gain::MergeFrom(from.att());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_forwardpower()) {
      set_forwardpower(from.forwardpower());
    }
    if (from.has_backwardpower()) {
      set_backwardpower(from.backwardpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void R2T2Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2T2Message::CopyFrom(const R2T2Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2T2Message::IsInitialized() const {

  if (has_gain()) {
    if (!this->gain().IsInitialized()) return false;
  }
  if (has_att()) {
    if (!this->att().IsInitialized()) return false;
  }
  return true;
}

void R2T2Message::Swap(R2T2Message* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(rxdata_, other->rxdata_);
    std::swap(txdata_, other->txdata_);
    std::swap(fftdata_, other->fftdata_);
    std::swap(txdataack_, other->txdataack_);
    std::swap(rxfreq_, other->rxfreq_);
    std::swap(txfreq_, other->txfreq_);
    std::swap(txrate_, other->txrate_);
    std::swap(rxrate_, other->rxrate_);
    std::swap(fftrate_, other->fftrate_);
    std::swap(fftsize_, other->fftsize_);
    std::swap(rx_, other->rx_);
    std::swap(tx_, other->tx_);
    std::swap(gain_, other->gain_);
    std::swap(att_, other->att_);
    std::swap(antenna_, other->antenna_);
    std::swap(forwardpower_, other->forwardpower_);
    std::swap(backwardpower_, other->backwardpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata R2T2Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R2T2Message_descriptor_;
  metadata.reflection = R2T2Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace R2T2Proto

// @@protoc_insertion_point(global_scope)
